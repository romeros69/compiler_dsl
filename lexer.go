// Code generated by golex. DO NOT EDIT.

package main

import (
	"bytes"
	"errors"
	"fmt"
	"log"
)

type Lex struct {
	input  []byte
	pos    int
	result ent
	err    error
}

var buf = bytes.NewBuffer(nil)

func NewLex(input []byte) *Lex {
	return &Lex{input: input}
}

func (l *Lex) Next() byte {
	if l.pos >= len(l.input) || l.pos == -1 {
		if l.pos == len(l.input) {
			buf.WriteByte(l.input[l.pos-1])
		}
		l.pos = -1
		return 0
	}
	if l.pos != 0 {
		buf.WriteByte(l.input[l.pos-1])
	}
	l.pos++
	return l.input[l.pos-1]
}

func (l *Lex) Error(s string) {
	l.err = errors.New(s)
}

func (l *Lex) Backup() {
	if l.pos == -1 {
		return
	}
	l.pos--
}

func (l *Lex) Lex(lval *yySymType) int {
	c := l.Next() // init

yystate0:

	buf.Reset()

	goto yystart1

yystate1:
	c = l.Next()
yystart1:
	switch {
	default:
		goto yystate3 // c >= '\x01' && c <= '\b' || c == '\v' || c == '\f' || c >= '\x0e' && c <= '\x1f' || c >= '!' && c <= '@' || c >= '[' && c <= '`' || c == '|' || c >= '~' && c <= 'Ã¿'
	case c == '\n':
		goto yystate5
	case c == '\t' || c == '\r' || c == ' ':
		goto yystate4
	case c == '\x00':
		goto yystate2
	case c == 'e':
		goto yystate8
	case c == 'i':
		goto yystate14
	case c == 's':
		goto yystate17
	case c == '{':
		goto yystate24
	case c == '}':
		goto yystate25
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'd' || c >= 'f' && c <= 'h' || c >= 'j' && c <= 'r' || c >= 't' && c <= 'z':
		goto yystate6
	}

yystate2:
	c = l.Next()
	goto yyrule8

yystate3:
	c = l.Next()
	goto yyrule9

yystate4:
	c = l.Next()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ' || c == 's':
		goto yystate5
	}

yystate5:
	c = l.Next()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ' || c == 's':
		goto yystate5
	}

yystate6:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z':
		goto yystate7
	}

yystate7:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z':
		goto yystate7
	}

yystate8:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 'n':
		goto yystate9
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'm' || c >= 'o' && c <= 'z':
		goto yystate7
	}

yystate9:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 't':
		goto yystate10
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z':
		goto yystate7
	}

yystate10:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 'i':
		goto yystate11
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'h' || c >= 'j' && c <= 'z':
		goto yystate7
	}

yystate11:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 't':
		goto yystate12
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z':
		goto yystate7
	}

yystate12:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 'y':
		goto yystate13
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'x' || c == 'z':
		goto yystate7
	}

yystate13:
	c = l.Next()
	switch {
	default:
		goto yyrule6
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z':
		goto yystate7
	}

yystate14:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 'n':
		goto yystate15
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'm' || c >= 'o' && c <= 'z':
		goto yystate7
	}

yystate15:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 't':
		goto yystate16
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z':
		goto yystate7
	}

yystate16:
	c = l.Next()
	switch {
	default:
		goto yyrule4
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z':
		goto yystate7
	}

yystate17:
	c = l.Next()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate5
	case c == 's':
		goto yystate18
	case c == 't':
		goto yystate19
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'r' || c >= 'u' && c <= 'z':
		goto yystate7
	}

yystate18:
	c = l.Next()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate5
	case c == 's':
		goto yystate18
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'r' || c >= 't' && c <= 'z':
		goto yystate7
	}

yystate19:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 'r':
		goto yystate20
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'q' || c >= 's' && c <= 'z':
		goto yystate7
	}

yystate20:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 'i':
		goto yystate21
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'h' || c >= 'j' && c <= 'z':
		goto yystate7
	}

yystate21:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 'n':
		goto yystate22
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'm' || c >= 'o' && c <= 'z':
		goto yystate7
	}

yystate22:
	c = l.Next()
	switch {
	default:
		goto yyrule7
	case c == 'g':
		goto yystate23
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'f' || c >= 'h' && c <= 'z':
		goto yystate7
	}

yystate23:
	c = l.Next()
	switch {
	default:
		goto yyrule5
	case c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z':
		goto yystate7
	}

yystate24:
	c = l.Next()
	goto yyrule2

yystate25:
	c = l.Next()
	goto yyrule3

yyrule1: // {C}
	{
		// continue
		goto yystate0
	}
yyrule2: // {LS}
	{
		{
			return LS
		}
		goto yystate0
	}
yyrule3: // {RS}
	{
		{
			return RS
		}
		goto yystate0
	}
yyrule4: // {INT}
	{
		{
			return INT_T_TOK
		}
		goto yystate0
	}
yyrule5: // {STRING}
	{
		{
			return STRING_T_TOK
		}
		goto yystate0
	}
yyrule6: // {E}
	{
		{
			return EN_TOK
		}
		goto yystate0
	}
yyrule7: // {S}
	{
		{
			lval.val = buf.String()
			return IDENT
		}
		goto yystate0
	}
yyrule8: // \0
	{
		{
			return -1
		} // Exit on EOF or any other error
		goto yystate0
	}
yyrule9: // .
	if true { // avoid go vet determining the below panic will not be reached
		{
			fmt.Printf("ERROR 2: %s, buf: %s\n", string(c), buf)
			return -1
		}
		goto yystate0
	}
	panic("unreachable")

yyabort: // no lexem recognized
	// silence unused label errors for build and satisfy go vet reachability analysis
	{
		if false {
			goto yyabort
		}
		if false {
			goto yystate0
		}
		if false {
			goto yystate1
		}
	}

	fmt.Println("ERROR 3")
	log.Fatal("scanner internal error")
	return 0
}
