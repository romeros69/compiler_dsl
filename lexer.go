// Code generated by golex. DO NOT EDIT.

package main

import (
	"bytes"
	"errors"
	"log"
)

type Lex struct {
	input  []byte
	pos    int
	result ent
	err    error
}

var buf = bytes.NewBuffer(nil)

func NewLex(input []byte) *Lex {
	return &Lex{input: input}
}

func (l *Lex) Next() byte {
	if l.pos >= len(l.input) || l.pos == -1 {
		l.pos = -1
		return 0
	}
	buf.WriteByte(l.input[l.pos])
	l.pos++
	return l.input[l.pos-1]
}

func (l *Lex) Error(s string) {
	l.err = errors.New(s)
}

func (l *Lex) Backup() {
	if l.pos == -1 {
		return
	}
	l.pos--
}

func (l *Lex) Lex(lval *yySymType) int {
	c := l.Next() // init

yystate0:

	buf.Reset() // Code before the first rule is executed before every scan cycle (state 0 action)

	goto yystart1

yystate1:
	c = l.Next()
yystart1:
	switch {
	default:
		goto yystate3 // c >= '\x01' && c <= '\b' || c == '\v' || c == '\f' || c >= '\x0e' && c <= '\x1f' || c >= '!' && c <= '@' || c >= '[' && c <= '^' || c == '`' || c >= '{' && c <= 'Ã¿'
	case c == '\n':
		goto yystate5
	case c == '\t' || c == '\r' || c == ' ':
		goto yystate4
	case c == '\x00':
		goto yystate2
	case c == 'e':
		goto yystate8
	case c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'd' || c >= 'f' && c <= 'z':
		goto yystate6
	}

yystate2:
	c = l.Next()
	goto yyrule4

yystate3:
	c = l.Next()
	goto yyrule5

yystate4:
	c = l.Next()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate5
	}

yystate5:
	c = l.Next()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate5
	}

yystate6:
	c = l.Next()
	switch {
	default:
		goto yyrule3
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z':
		goto yystate7
	}

yystate7:
	c = l.Next()
	switch {
	default:
		goto yyrule3
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z':
		goto yystate7
	}

yystate8:
	c = l.Next()
	switch {
	default:
		goto yyrule3
	case c == 'n':
		goto yystate9
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'm' || c >= 'o' && c <= 'z':
		goto yystate7
	}

yystate9:
	c = l.Next()
	switch {
	default:
		goto yyrule3
	case c == 't':
		goto yystate10
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z':
		goto yystate7
	}

yystate10:
	c = l.Next()
	switch {
	default:
		goto yyrule3
	case c == 'i':
		goto yystate11
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'h' || c >= 'j' && c <= 'z':
		goto yystate7
	}

yystate11:
	c = l.Next()
	switch {
	default:
		goto yyrule3
	case c == 't':
		goto yystate12
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z':
		goto yystate7
	}

yystate12:
	c = l.Next()
	switch {
	default:
		goto yyrule3
	case c == 'y':
		goto yystate13
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'x' || c == 'z':
		goto yystate7
	}

yystate13:
	c = l.Next()
	switch {
	default:
		goto yyrule2
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z':
		goto yystate7
	}

yyrule1: // [ \t\n\r]+
	{
		// Ignore whitespace
		goto yystate0
	}
yyrule2: // {E}
	{
		{
			return EN_TOK
		}
		goto yystate0
	}
yyrule3: // {S}
	{
		{
			lval.val = buf.String()
			return IDENT
		}
		goto yystate0
	}
yyrule4: // \0
	{
		{
			return -1
		} // Exit on EOF or any other error
		goto yystate0
	}
yyrule5: // .
	if true { // avoid go vet determining the below panic will not be reached
		{
			return -1
		}
		goto yystate0
	}
	panic("unreachable")

yyabort: // no lexem recognized
	// silence unused label errors for build and satisfy go vet reachability analysis
	{
		if false {
			goto yyabort
		}
		if false {
			goto yystate0
		}
		if false {
			goto yystate1
		}
	}

	log.Fatal("scanner internal error")
	return 0

} // *1 this right brace
